options(mc.cores = if(is_on_travis) 4 else 2)
rstan_options(auto_write = TRUE)
one_gp_dat <- list(N = 36, x = seq(from = 0, to = 1, length.out = 36))
sim_one_gp_model <- stan_model('code/sim_one_gp.stan')
one_gp_fit <- sampling(sim_one_gp_model,
data = one_gp_dat, algorithm = "Fixed_param",
iter = 1000, warmup = 500, chains = 4,
seed = 2018
)
sim_one_gp_dat <- extract(one_gp_fit)
plot(one_gp_dat$x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
print(one_gp_fit)
rm(list = ls())
gc()
source('~/Thesis-Template-Bookdown/_common.R')
source('~/Thesis-Template-Bookdown/_common.R')
one_gp_dat <- list(N = 36, x = seq(from = 0, to = 1, length.out = 36))
sim_one_gp_model <- stan_model('code/sim_one_gp.stan')
(-50:50)/25
x <- (-50:50)/25
N <- length(x)
N
one_gp_fit <- sampling(sim_one_gp_model,
data = list(x = x, N = N),
iter = 10000, warmup = 5000, chains = 4,
seed = 2018
)
sim_one_gp_dat <- extract(one_gp_fit)
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
print(one_gp_fit)
rm(one_gp_dat)
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
sim_one_gp_dat <- extract(one_gp_fit)
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
class(sim_one_gp_dat)
pdf(file = "one-dim-gp.pdf", width = 6,height = 6*0.618)
par(mar = c(4.1, 4.1, 0.5, 0.5))
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 0.5, 0.5))
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "Location", ylab = "S(x)"
)
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(x, colMeans(sim_one_gp_dat$y),
xlab = "x", ylab = "S(x)"
)
dev.off()
styler:::style_selection()
styler:::style_selection()
# order TeXLive.pkgs
con_tex <- file("latex/TeXLive.pkgs")
writeLines(sort(readLines(con_tex),decreasing = FALSE),con = con_tex)
close(con_tex)
citation('glmmBUGS')
install.packages("glmmBUGS")
load("~/Thesis-Template-Bookdown/code/rongelap/rongelap-geoR-geoRglm-MCML.RData")
library(geoR)
library(geoRglm)
data(rongelap)
## investigating mixing and convergence
library(coda)
plot(MCmle.coda)
plot(MCmle.coda)
plot(MCmle.coda)
plot(MCmle.coda)
pdf(file = 'demo.pdf')
plot(MCmle.coda)
dev.off()
autocorr.plot(MCmle.coda)
pdf(file = 'supplement/rangelap-mcml-acf.pdf')
autocorr.plot(MCmle.coda)
dev.off()
seq(8,40)
seq(1, 3, l = 21)
postscript("profile.phitausq.ps", height = 5, width = 6.5, horizontal = FALSE)
par(cex = 0.9)
plot(pr.lik.rongelap, levels = seq(-5, 1, by = 0.1), labcex = 0.55)
dev.off()
pdf("profile.phitausq.pdf")
par(cex = 0.9)
plot(pr.lik.rongelap, levels = seq(-5, 1, by = 0.1), labcex = 0.55)
dev.off()
class(pr.lik.rongelap)
?plot.proflik
pdf("profile.phitausq.pdf")
par(cex = 0.9)
plot(pr.lik.rongelap, levels = seq(-5, 1, by = 0.05), labcex = 0.55)
dev.off()
pdf("profile.phitausq.pdf")
par(mar = c(4.1, 4.1, 0.5, 0.5))
plot(pr.lik.rongelap, levels = seq(-5, 1, by = 0.05), labcex = 0.55)
dev.off()
knitr::include_graphics(path = "figures/profile-phitausq.png")
?mcmc.control
summary(lik.boxcox.1.expon.nugget)
lik.boxcox.1.expon.nugget
class(lik.boxcox.1.expon.nugget)
packageVersion('bookdown')
load("~/Thesis-Template-Bookdown/code/rongelap/rongelap-geoR-geoRglm-MCML.RData")
library(geoR)
library(geoRglm)
data(rongelap)
## investigating mixing and convergence
library(coda)
?glsm.mcmc
str(rongelap)
emp.mean
emp.var
nug.value
2.401*2.053
?krige.conv
class(MCmle.coda)
str(MCmle.coda)
install.packages("~/rstan/rstan/rstan_2.18.1.tar.gz", repos = NULL, type = "source")
install.packages("~/rstan/rstan/rstan_2.18.1.tar.gz", repos = NULL, type = "source")
styler:::style_selection()
2
library(rstan)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
?stan_par
source('~/rpm-packages.R')
rpm_pkgs <- classify.rpms()
rpm_pkgs
packageVersion('Rcpp')
?knitr::knit
styler:::style_selection()
styler:::style_selection()
source('~/Thesis-Template-Bookdown/_common.R')
sim_data_model <- stan_model("code/sim_gp_latent.stan")
source('~/Thesis-Template-Bookdown/_common.R')
sim_data_model <- stan_model("code/sim_gp_latent.stan")
sim_one_gp_model <- stan_model('code/sim_one_gp.stan')
sim_one_gp_model <- stan_model('code/sim_one_gp.stan')
sim_one_gp_model <- stan_model('code/sim_one_gp.stan')
# sim_one_gp_dat <- extract(one_gp_fit)
# pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
# par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(x, colMeans(sim_one_gp_dat$y),
#      xlab = "x", ylab = "S(x)"
# )
# dev.off()
knitr::include_graphics(path = "figures/one-dim-gp.png")
x <- (-50:50)/25
N <- length(x)
N
library(dplyr)
library(ggplot2)
library(rstan)
library(reshape2)
library(printr)
library(gridExtra)
set.seed(123)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
sim_data_model <- stan_model('sim_gp_latent.stan')
dat_list <- list(N = 2000, alpha = 1, length_scale = 0.15, sigma = sqrt(0.1))
set <- sample(1:dat_list$N,size = 30, replace = F)
draw <- sampling(sim_data_model,iter=1,algorithm='Fixed_param', chains = 1, data = dat_list,
seed = 363360090)
samps <- rstan::extract(draw)
plt_df = with(samps,data.frame(x = x[1,], y = y[1,], f = f[1,]))
ggplot(data = plt_df[set,], aes(x=x, y=y)) +
geom_point(aes(colour = 'Realized data')) +
geom_line(data = plt_df, aes(x = x, y = f, colour = 'Latent mean function')) +
theme_bw() + theme(legend.position="bottom") +
scale_color_manual(name = '', values = c('Realized data'='black','Latent mean function'='red')) +
xlab('X') +
ylab('y') +
ggtitle(paste0('N=',length(set),' from length-scale = 0.15, alpha = 1, sigma = 0.32'))
print(draw)
# ggplot(data = plt_df[set,], aes(x=x, y=y)) +
#   geom_point(aes(colour = 'Realized data')) +
#   geom_line(data = plt_df, aes(x = x, y = f, colour = 'Latent mean function')) +
#    theme_bw() + theme(legend.position="bottom") +
#   scale_color_manual(name = '', values = c('Realized data'='black','Latent mean function'='red')) +
#   xlab('X') +
#   ylab('y') +
#   ggtitle(paste0('N=',length(set),' from length-scale = 0.15, alpha = 1, sigma = 0.32'))
ggplot(data = plt_df, aes(x=x, y=y)) +
geom_point(aes(colour = 'Realized data')) +
geom_line(data = plt_df, aes(x = x, y = f, colour = 'Latent mean function')) +
theme_bw() + theme(legend.position="bottom") +
scale_color_manual(name = '', values = c('Realized data'='black','Latent mean function'='red')) +
xlab('X') +
ylab('y') +
ggtitle(paste0('N=',length(set),' from length-scale = 0.15, alpha = 1, sigma = 0.32'))
styler:::style_selection()
# pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
# par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(dat_list$x[set], colMeans(sim_one_gp_dat$y)[set],
#      xlab = "x", ylab = "S(x)"
# )
# dev.off()
knitr::include_graphics(path = "figures/one-dim-gp.png")
rm(list = ls())
gc()
library(methods)
set.seed(2018)
# 加载依赖
library(ggplot2)
library(StanHeaders)
library(rstan)
# 设置环境
is_on_travis = identical(Sys.getenv("TRAVIS"), "true")
is_online = curl::has_internet()
options(mc.cores = if(is_on_travis) 4 else 2)
rstan_options(auto_write = TRUE)
sim_one_gp_model <- stan_model("code/sim_one_gp.stan")
dat_list <- list(N = 2000, sigma = 1, phi = 0.15, tau = sqrt(0.1))
# set <- sample(1:dat_list$N, size = 30, replace = F)
draw <- sampling(sim_one_gp_model,
iter = 1, algorithm = "Fixed_param",
chains = 1, data = dat_list,
seed = 363360090
)
samps <- rstan::extract(draw)
plt_df <- with(samps, data.frame(x = x[1, ], y = y[1, ], f = f[1, ]))
plot(y~x,data = plt_df)
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(dat_list$x[set], colMeans(sim_one_gp_dat$y)[set],
#      xlab = "x", ylab = "S(x)"
# )
plot(y~x,data = plt_df, xlab = "x", ylab = "S(x)",col = "black")
lines(f~x,data = plt_df,col = "red")
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(dat_list$x[set], colMeans(sim_one_gp_dat$y)[set],
#      xlab = "x", ylab = "S(x)"
# )
plot(y~x,data = plt_df, xlab = "x", ylab = "S(x)",col = "black")
line(f~x,data = plt_df,col = "red")
dev.off()
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df,
xlab = "x", ylab = "S(x)"
)
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df,
xlab = "x", ylab = "S(x)"
)
points(f~x,data = plt_df,col = "red")
dev.off()
set <- sample(1:dat_list$N,size = 36, replace = F)
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df[set,],
xlab = "x", ylab = "S(x)"
)
points(f~x,data = plt_df,col = "red")
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df[set,],
xlab = "x", ylab = "S(x)"
)
# points(f~x,data = plt_df,col = "red")
line(f~x,data = plt_df,col = "red")
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df[set,],
xlab = "x", ylab = "S(x)"
)
# points(f~x,data = plt_df,col = "red")
abline(f~x,data = plt_df,col = "red")
dev.off()
?points
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df[set,],
xlab = "x", ylab = "S(x)"
)
points(f~x,data = plt_df,col = "red",type = "l")
dev.off()
set <- sample(1:dat_list$N,size = 36, replace = F)
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df[set,],
xlab = "x", ylab = "S(x)"
)
points(f~x,data = plt_df,col = "red")
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8,height = 8*0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y~x,data = plt_df,type = "n",xlab = "x", ylab = "S(x)")
points(y~x,data = plt_df[set,],col = "black")
points(f~x,data = plt_df,col = "red")
dev.off()
styler:::style_selection()
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y ~ x, data = plt_df, type = "n", xlab = "x", ylab = "S(x)")
points(f ~ x, data = plt_df, col = "dodgerblue")
points(y ~ x, data = plt_df[set, ], col = "darkorange")
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y ~ x, data = plt_df, type = "n", xlab = "x", ylab = "S(x)")
points(f ~ x, data = plt_df, col = "dodgerblue",pch=16)
points(y ~ x, data = plt_df[set, ], col = "darkorange",pch = 16)
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(y ~ x, data = plt_df, type = "n", xlab = "x", ylab = "S(x)")
points(f ~ x, data = plt_df,pch=16)
dev.off()
# set <- sample(1:dat_list$N, size = 36, replace = F)
# pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
# par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(y ~ x, data = plt_df, type = "n", xlab = "x", ylab = "S(x)")
# points(f ~ x, data = plt_df,pch=16)
# dev.off()
knitr::include_graphics(path = "figures/one-dim-gp.png")
rm(list = ls())
gc()
library(methods)
set.seed(2018)
# 加载依赖
library(ggplot2)
library(StanHeaders)
library(rstan)
# 设置环境
is_on_travis = identical(Sys.getenv("TRAVIS"), "true")
is_online = curl::has_internet()
options(mc.cores = if(is_on_travis) 4 else 2)
rstan_options(auto_write = TRUE)
sim_one_gp_model <- stan_model("code/sim_one_gp.stan")
dat_list <- list(N = 2000, sigma = 1, phi = 0.15)
draw <- sampling(sim_one_gp_model,
iter = 1, algorithm = "Fixed_param",
chains = 1, data = dat_list,
seed = 363360090
)
rm(sim_one_gp_model)
sim_one_gp_model <- stan_model("code/sim_one_gp.stan")
draw <- sampling(sim_one_gp_model,
iter = 1, algorithm = "Fixed_param",
chains = 1, data = dat_list,
seed = 363360090
)
samps <- rstan::extract(draw)
plt_df <- with(samps, data.frame(x = x[1, ], f = f[1, ]))
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(f ~ x, data = plt_df, xlab = "x", ylab = "S(x)",pch = 16)
dev.off()
set <- sample(1:dat_list$N, size = 36, replace = F)
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(f ~ x, data = plt_df[set,], xlab = "x", ylab = "S(x)",pch = 16)
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(f ~ x, data = plt_df[set,], xlab = "x", ylab = "S(x)",pch = 16,col  = "Darkgrey")
points(f~x,data = plt_df[set,], pch = 16, col = 'darkorange')
dev.off()
pdf(file = "one-dim-gp.pdf", width = 8, height = 8 * 0.618)
par(mar = c(4.1, 4.1, 1.5, 0.5))
plot(f ~ x, data = plt_df, xlab = "x", ylab = "S(x)",pch = 16,col  = "Darkgrey")
points(f~x,data = plt_df[set,], pch = 16, col = 'darkorange')
dev.off()
styler:::style_selection()
# 指数型协方差函数  连续但是在原点不可微
# pdf(file = "one-dim-gp-exp.pdf", width = 8, height = 8 * 0.618)
# par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(f ~ x, data = plt_df, xlab = "x", ylab = "S(x)",pch = 16,col  = "Darkgrey")
# points(f~x,data = plt_df[set,], pch = 16, col = 'darkorange')
# dev.off()
# 幂二次指数型协方差函数 不但连续而且无穷可微
# pdf(file = "one-dim-gp-exp-quad.pdf", width = 8, height = 8 * 0.618)
# par(mar = c(4.1, 4.1, 1.5, 0.5))
# plot(f ~ x, data = plt_df, xlab = "x", ylab = "S(x)",pch = 16,col  = "Darkgrey")
# points(f~x,data = plt_df[set,], pch = 16, col = 'darkorange')
# dev.off()
knitr::include_graphics(path = c(
"figures/one-dim-gp-exp.png",
"figures/one-dim-gp-exp-quad.png"
))
install.packages("citr")
citr:::insert_citation()
citr:::insert_citation(bib_file = 'latex/refer.bib')
citr:::insert_citation()
citation('INLA')
knitr::include_graphics(path = "figures/binom-without-nugget-geoRglm.png")
styler:::style_selection()
styler:::style_selection()
\begin{align}
\alpha   & \sim \mathcal{N}(0,1) \\
\phi     & \sim \mathrm{Exp}(0.2) \\
\sigma^2 & \sim \mathrm{Inv-}\chi^2(5,0.5)
\end{align}
分别使用低秩近似算法 (LR)， 蒙特卡罗最大似然算法 (MCML)， 贝叶斯 MCMC 算法 (MCMC) 和贝叶斯 STAN-MCMC 算法 (STAN-MCMC) 估计模型的参数。与 Stan 比较
sessionInfo()
cat(readLines("code/sim_one_gp_exp.stan"),sep = "\n")
df6 <- readRDS("~/df6.RDS")
df6
t(df6)
df8 = df6
rm(df6)
saveRDS(df8,file = "df8.RDS")
knitr::kable(t(df8), col.names = c("mean","var","2.5%","25%","50%","75%","97.5%"),digits = 3,format = "markdown")
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
library(help=knitr)
3/43
packageVersion('bookdown')
library(help=geoRglm)
library(help=geoRglm)
cat(readLines("code/8schools.stan"),sep = "\n")
knitr::include_graphics(path = c("figures/heteroscedasticity.png","figures/normality.png"))
knitr::include_graphics(path = "figures/rangelap-mcml-diagnosis-trace-9.png")
knitr::include_graphics(path = "figures/rangelap-mcml-diagnosis-acf-9.png")
library(geoR)
data("gambia")
dat1 <- gambia[gambia$x < 400000 & gambia$y < 1475000, ]
dat1$area <- "A1"
dat2 <- gambia[gambia$x < 400000 & gambia$y > 1475000, ]
dat2$area <- "A2"
dat3 <- gambia[gambia$x > 480000 & gambia$x < 530000, ]
dat3$area <- "A3"
# 65 个村子的位置
# unique(gambia[, c("x", "y")])
dat_coord <- unique(gambia[gambia$x > 530000, c("x", "y")])
id5 <- c(
"295", "404", "1980", "1924", "1788", "1076",
"1045", "1", "142", "1533", "1457"
)
dat5 <- gambia[gambia$x %in% dat_coord[id5, 1], ]
dat5$area <- "A5"
id4 <- setdiff(row.names(dat_coord), id5)
dat4 <- gambia[gambia$x %in% dat_coord[id4, 1], ]
dat4$area <- "A4"
# 带 area 标记的数据集
new_gambia <- rbind.data.frame(dat1, dat2, dat3, dat4, dat5)
new_gambia
saveRDS(new_gambia,file = 'data/new_gambia.RDS')
rm(list = ls())
load("~/Thesis-Template-Bookdown/code/rongelap/rongelap-OpenBUGS-glmmBUGS.RData")
summary(rongelapUTMResult)
library(glmmBUGS)
library(R2OpenBUGS)
summary(rongelapUTMResult)
rongelapUTMResult
?glmmBUGS
rm(list = ls())
citation('bbmle')
20000/20
if(!require(tinytex)) install.packages('tinytex')
?besselK
install.packages("tikzDevice")
tinytex::tlmgr_install('pgf')
tinytex::pdflatex('../figures/bessel.tex')
?tools::texi2dvi
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
